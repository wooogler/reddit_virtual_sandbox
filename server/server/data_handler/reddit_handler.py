import argparse
from datetime import datetime, timedelta
import itertools
import json
import math
import sys
import time

import numpy as np
import praw
import requests


class RedditHandler():
    def __init__(self):
        submission_endpoint = r'https://api.pushshift.io/reddit/search/submission?subreddit={}&after={}&before={}&size={}'
        comment_endpoint = r'https://api.pushshift.io/reddit/search/comment?subreddit={}&after={}&before={}&size={}'

    def make_request(self, uri, max_retries=5):
        """Send HTTP request to 'uri'
        
        Returns:
            list(dict): posts.
        """

        def fire_away(uri):
            response = requests.get(uri)
            assert response.status_code == 200
            return json.loads(response.content) # json.loads(json string) => python dict.
        
        trials = 1
        while trials < max_retries:
            try:
                time.sleep(1)
                response = fire_away(uri)
                return response
            except:
                time.sleep(1)
                trials += 1
        print('fail')
        return fire_away(uri)

    def project_submission(self, post):
        return {
            'author': post['author'],
            'body': post['selftext'],
            'created_utc': post['created_utc'],
            'full_link': post['full_link'],
            'id': post['id'],
            'subreddit': post['subreddit'],
            'title': post['title']
        }
    
    def project_comment(self, post):
        return {
            'author': post['author'],
            'body': post['body'],
            'created_utc': post['created_utc'],
            'full_link': 'https://www.reddit.com' + post['permalink'],
            'id': post['id'],
            'subreddit': post['subreddit'],
            'link_id': post['link_id']
        }

    def get_and_save_posts(self, subreddit, start_at, end_at):
        """Get posts (submissions, comments) from Reddit using pushshift 
        & save them into database.

        Returns:
            bool: True if succeed False otherwise.
        """

        SIZE = 500
        n = SIZE
        posts_collection = []
        while (n == SIZE):
            URI_TEMPLATE = self.submission_endpoint
            # 1. get posts in subreddit for specified time range

            posts = self.make_request(URI_TEMPLATE.format(subreddit, start_at, end_at, SIZE))['data']
            # type(posts) = list of dicts, where each dict = info for each submission.
            n = len(posts)
            posts = list(map(self.project_post, posts))

            posts_collection.extend(posts)
            
            start_at = posts_collection[-1]['created_utc'] - (1)
            print('now processing', datetime.utcfromtimestamp(int(start_at)).strftime('%Y-%m-%d %H:%M:%S'))
        

         # 2. remove duplicates generated by time overlap
        posts = [dict(t) for t in {tuple(d.items()) for d in posts_collection}]

        # TODO: save to database.
        return True
